/*
    Project Euler Problem No. 12 - Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
ten terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over 500 divisors?
 */

package main

import (
    "fmt"
)

func check(num int) int {
    divs := 2
    limit := num
    for cnt := 2; cnt < limit; cnt++ {
        if num % cnt == 0 { 
            limit = num / cnt
            divs++ 
        }
    }
    return divs*2
}

func main() {

c := `The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over 500 divisors?`

    fmt.Println(c)
    fmt.Println()

    divisors := 0
    triangular := 0
    for num := 1; divisors <= 500; num++ {
        triangular = triangular + num
        divisors = check(triangular)
    }

    fmt.Println("The 1st triangular number having more than 500 divisors")
    fmt.Printf("is %d. It has %d divisors.\n", triangular, divisors)
}
